{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8b9bdfad",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 18)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m<tokenize>:18\u001b[1;36m\u001b[0m\n\u001b[1;33m    self.dfsutil(x,visited)\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "\n",
    "class graph:\n",
    "   \n",
    "    def __init__(self):\n",
    "           self.graph=defaultdict(list)\n",
    "        \n",
    "    def addedge(self,g,x):\n",
    "            self.graph[g].append[x]\n",
    "    def dfsutil(self,x,visited):\n",
    "           visited.add(x)\n",
    "            print(x, end=' ')\n",
    "    for adjacent in self.graph[x]:\n",
    "        if adjacent not in visited:\n",
    "            self.dfsutil(adjacent,visited)\n",
    "    def DFS(self,x)\n",
    "          visited=list()\n",
    "         self.dfsutil(x,visited)\n",
    "r=graph()\n",
    "r.addedge(1,0)\n",
    "r.addedge(2,0)\n",
    "r.addedge(3,0)\n",
    "r.addedge(3,2)\n",
    "print(\"following is DFS from(starting from  vertex 3)\")\n",
    "r.DFS(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f9b2f60",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
